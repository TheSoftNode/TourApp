{
    "openapi": "3.0.3",
    "info": {
        "title": "Your API Title",
        "description": "Your API description here",
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:5000",
            "description": "Local server"
        }
    ],
    "paths": {
        "/api/v1/users/verify-email": {
            "post": {
                "summary": "Verify account before saving it",
                "tags": [
                    "Users"
                ],
                "description": "Verifies a user’s account by checking the provided email and generating a verification token. Sends an email to the user for account verification.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The user’s name",
                                        "example": "John Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "description": "The user’s email address",
                                        "example": "johndoe@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "The user’s password",
                                        "example": "password123"
                                    },
                                    "confirmPassword": {
                                        "type": "string",
                                        "description": "Confirmation of the password",
                                        "example": "password123"
                                    }
                                },
                                "required": [
                                    "name",
                                    "email",
                                    "password",
                                    "confirmPassword"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Account verification initiated. A verification email is sent to the user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Please check your email: johndoe@example.com to activate your account!"
                                        },
                                        "token": {
                                            "type": "string",
                                            "description": "JWT token for verifying the email",
                                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request. Email already exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Email Already exists"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/sign-up": {
            "post": {
                "summary": "Sign up a new user",
                "tags": [
                    "Users"
                ],
                "description": "Sign up a new user by verifying the token and persisting the user data in the database.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "activation_token": {
                                        "type": "string",
                                        "description": "activation token from email verification",
                                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                                    },
                                    "activation_Code": {
                                        "type": "string",
                                        "description": "activation code from verification",
                                        "example": "1234"
                                    }
                                },
                                "required": [
                                    "activation_token",
                                    "activation_Code"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User successfully signed up and persisted to the database. JWT token sent to the client.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "token": {
                                            "type": "string",
                                            "description": "JWT token for the signed-up user",
                                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                                        },
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "user": {
                                                    "type": "object",
                                                    "properties": {
                                                        "name": {
                                                            "type": "string",
                                                            "description": "Name of the new user",
                                                            "example": "John Doe"
                                                        },
                                                        "email": {
                                                            "type": "string",
                                                            "description": "Email of the new user",
                                                            "example": "johndoe@example.com"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid token or token does not match.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid token. Please try again"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/login": {
            "post": {
                "summary": "Log in a user",
                "tags": [
                    "Users"
                ],
                "description": "Logs in an existing user by checking their email and password, and sends a JWT token if authentication is successful.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "description": "Email address of the user",
                                        "example": "johndoe@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "Password of the user",
                                        "example": "password123"
                                    }
                                },
                                "required": [
                                    "email",
                                    "password"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User logged in successfully, and JWT token returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "token": {
                                            "type": "string",
                                            "description": "JWT token for the authenticated user",
                                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                                        },
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "user": {
                                                    "type": "object",
                                                    "properties": {
                                                        "name": {
                                                            "type": "string",
                                                            "description": "Name of the user",
                                                            "example": "John Doe"
                                                        },
                                                        "email": {
                                                            "type": "string",
                                                            "description": "Email of the user",
                                                            "example": "johndoe@example.com"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request. Email or password not provided.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Please provide email and password!"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Incorrect email or password.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Incorrect email or password"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/logout": {
            "post": {
                "summary": "Logout a user",
                "tags": [
                    "Users"
                ],
                "description": "Logs out the user by clearing the access and refresh tokens.",
                "responses": {
                    "200": {
                        "description": "User logged out successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Logged out successfully"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request. Error while logging out.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Error message here"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/refresh-token": {
            "post": {
                "summary": "Refresh access token",
                "tags": [
                    "Users"
                ],
                "description": "Generates a new access token using the refresh token from cookies.",
                "responses": {
                    "200": {
                        "description": "Access token and refresh token refreshed successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "accessToken": {
                                            "type": "string",
                                            "description": "New JWT access token for the authenticated user",
                                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                                        },
                                        "refreshToken": {
                                            "type": "string",
                                            "description": "New JWT refresh token for the authenticated user",
                                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request. Could not refresh token or user not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Could not refresh token"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. User recently changed password or token is invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "User recently changed password! Please log in again."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/update-password": {
            "patch": {
                "summary": "Update user password",
                "tags": [
                    "Users"
                ],
                "description": "Allows the user to update their password by providing the old password, new password, and a password confirmation.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "oldPassword": {
                                        "type": "string",
                                        "description": "The current password of the user",
                                        "example": "currentPassword123"
                                    },
                                    "newPassword": {
                                        "type": "string",
                                        "description": "The new password the user wants to set",
                                        "example": "newPassword123"
                                    },
                                    "confirmPassword": {
                                        "type": "string",
                                        "description": "Confirmation of the new password",
                                        "example": "newPassword123"
                                    }
                                },
                                "required": [
                                    "oldPassword",
                                    "newPassword",
                                    "confirmPassword"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "user": {
                                            "type": "object",
                                            "description": "Updated user details",
                                            "properties": {
                                                "_id": {
                                                    "type": "string",
                                                    "example": "60b8d9d6e24d2e001f85b8c3"
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "John Doe"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "johndoe@example.com"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request. Missing or invalid parameters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Please provide your old and new passwords"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Current password is incorrect.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Your current password is wrong."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/forgot-password": {
            "post": {
                "summary": "Forgot password",
                "tags": [
                    "Users"
                ],
                "description": "Generates a password reset token and sends it to the user's email address.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "description": "Email address of the user requesting password reset",
                                        "example": "johndoe@example.com"
                                    }
                                },
                                "required": [
                                    "email"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset token sent successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Token sent to email!"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found. No user with the provided email address.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "There is no user with email address."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error. Issue sending the email.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "There was an error sending the email. Try again later!"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/reset-password/{token}": {
            "post": {
                "summary": "Reset user password",
                "tags": [
                    "Users"
                ],
                "description": "Resets the user's password using a valid reset token.",
                "parameters": [
                    {
                        "name": "token",
                        "in": "path",
                        "required": true,
                        "description": "Password reset token sent to the user's email",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "password": {
                                        "type": "string",
                                        "description": "New password for the user",
                                        "example": "newPassword123"
                                    },
                                    "confirmPassword": {
                                        "type": "string",
                                        "description": "Confirmation of the new password",
                                        "example": "newPassword123"
                                    }
                                },
                                "required": [
                                    "password",
                                    "passwordConfirm"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Password reset successful. Please, log in with your new password."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request. Token is invalid or has expired.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Token is invalid or has expired"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/is-logged-in": {
            "get": {
                "summary": "Check if user is logged in",
                "tags": [
                    "Users"
                ],
                "description": "Checks if the user is logged in by verifying the JWT token from cookies. Sets the current user in response locals if authenticated.",
                "responses": {
                    "200": {
                        "description": "User is logged in.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "user": {
                                            "type": "object",
                                            "properties": {
                                                "_id": {
                                                    "type": "string",
                                                    "example": "60b8d9d6e24d2e001f85b8c3"
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "John Doe"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "johndoe@example.com"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "User is not logged in."
                    },
                    "500": {
                        "description": "Internal server error. Unable to verify token.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Unable to verify token."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/me": {
            "get": {
                "summary": "Get current user",
                "tags": [
                    "Users"
                ],
                "description": "Fetches the details of the currently logged-in user.",
                "responses": {
                    "200": {
                        "description": "User details retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "user": {
                                                    "type": "object",
                                                    "properties": {
                                                        "_id": {
                                                            "type": "string",
                                                            "example": "60b8d9d6e24d2e001f85b8c3"
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "John Doe"
                                                        },
                                                        "email": {
                                                            "type": "string",
                                                            "example": "johndoe@example.com"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. User not logged in."
                    }
                }
            }
        },
        "/api/v1/users/update-me": {
            "patch": {
                "summary": "Update current user information",
                "tags": [
                    "Users"
                ],
                "description": "Updates the user's name and email, but not the password.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Jane Doe"
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "janedoe@example.com"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "user": {
                                                    "type": "object",
                                                    "properties": {
                                                        "_id": {
                                                            "type": "string",
                                                            "example": "60b8d9d6e24d2e001f85b8c3"
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "Jane Doe"
                                                        },
                                                        "email": {
                                                            "type": "string",
                                                            "example": "janedoe@example.com"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request. Password update attempted.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This route is not for password updates. Please use /updateMyPassword."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/delete-me": {
            "delete": {
                "summary": "Delete current user account",
                "tags": [
                    "Users"
                ],
                "description": "Deactivates the current user account.",
                "responses": {
                    "204": {
                        "description": "User account deactivated successfully."
                    },
                    "401": {
                        "description": "Unauthorized. User not logged in."
                    }
                }
            }
        },
        "/api/v1/users/update-role/{id}": {
            "patch": {
                "summary": "Update user role",
                "tags": [
                    "Users"
                ],
                "description": "Updates the role of a specified user by ID.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "ID of the user whose role is to be updated",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "role": {
                                        "type": "string",
                                        "example": "admin"
                                    }
                                },
                                "required": [
                                    "role"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User role updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "_id": {
                                                    "type": "string",
                                                    "example": "60b8d9d6e24d2e001f85b8c3"
                                                },
                                                "role": {
                                                    "type": "string",
                                                    "example": "admin"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found."
                    }
                }
            }
        },
        "/api/v1/users/reactivate-account": {
            "post": {
                "summary": "Reactivate a user account",
                "tags": [
                    "Users"
                ],
                "description": "Reactivates a previously deactivated user account using the email address.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "johndoe@example.com"
                                    }
                                },
                                "required": [
                                    "email"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Account reactivated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "_id": {
                                                    "type": "string",
                                                    "example": "60b8d9d6e24d2e001f85b8c3"
                                                },
                                                "name": {
                                                    "type": "string",
                                                    "example": "John Doe"
                                                },
                                                "email": {
                                                    "type": "string",
                                                    "example": "johndoe@example.com"
                                                },
                                                "active": {
                                                    "type": "boolean",
                                                    "example": true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found. Please sign up to access resources."
                    },
                    "400": {
                        "description": "Bad request. Account is still active."
                    }
                }
            }
        },
        "/api/v1/users/create": {
            "post": {
                "summary": "Create a new user",
                "tags": [
                    "Users"
                ],
                "description": "This route is not defined. Please use /signup instead.",
                "responses": {
                    "500": {
                        "description": "Error. This route is not defined.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "This route is not defined! Please use /signup instead"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/users/{id}": {
            "get": {
                "summary": "Get user by ID",
                "tags": [
                    "Users"
                ],
                "description": "Fetches user details by user ID.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "ID of the user to retrieve",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User details retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "user": {
                                                    "type": "object",
                                                    "properties": {
                                                        "_id": {
                                                            "type": "string",
                                                            "example": "60b8d9d6e24d2e001f85b8c3"
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "John Doe"
                                                        },
                                                        "email": {
                                                            "type": "string",
                                                            "example": "johndoe@example.com"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found."
                    }
                }
            }
        },
        "/api/v1/users": {
            "get": {
                "summary": "Get all users",
                "tags": [
                    "Users"
                ],
                "description": "Fetches a list of all users.",
                "responses": {
                    "200": {
                        "description": "List of users retrieved successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "_id": {
                                                        "type": "string",
                                                        "example": "60b8d9d6e24d2e001f85b8c3"
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "John Doe"
                                                    },
                                                    "email": {
                                                        "type": "string",
                                                        "example": "johndoe@example.com"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tours": {
            "get": {
                "summary": "Get all tours",
                "tags": [
                    "Tours"
                ],
                "description": "Retrieves all tours with optional query parameters like pagination, sorting, and filtering.",
                "responses": {
                    "200": {
                        "description": "A list of all tours",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "string",
                                                "example": "5c88fa8cf4afda39709c2951"
                                            },
                                            "name": {
                                                "type": "string",
                                                "example": "The Sea Explorer"
                                            },
                                            "duration": {
                                                "type": "number",
                                                "example": 7
                                            },
                                            "maxGroupSize": {
                                                "type": "number",
                                                "example": 15
                                            },
                                            "difficulty": {
                                                "type": "string",
                                                "example": "medium"
                                            },
                                            "ratingsAverage": {
                                                "type": "number",
                                                "example": 4.8
                                            },
                                            "price": {
                                                "type": "number",
                                                "example": 497
                                            },
                                            "imageCover": {
                                                "type": "string",
                                                "example": "tour-1-cover.jpg"
                                            },
                                            "startLocation": {
                                                "type": "object",
                                                "properties": {
                                                    "type": {
                                                        "type": "string",
                                                        "example": "Point"
                                                    },
                                                    "coordinates": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "number"
                                                        },
                                                        "example": [
                                                            -118.113491,
                                                            34.111745
                                                        ]
                                                    },
                                                    "address": {
                                                        "type": "string",
                                                        "example": "2555 Brighton Ave, Los Angeles, CA"
                                                    },
                                                    "description": {
                                                        "type": "string",
                                                        "example": "Starting point for the tour."
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tours not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "No tours found."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "An internal server error occurred."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new tour",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Creates a new tour. Only accessible by admin and lead-guide.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "The Forest Hiker"
                                    },
                                    "duration": {
                                        "type": "number",
                                        "example": 5
                                    },
                                    "maxGroupSize": {
                                        "type": "number",
                                        "example": 12
                                    },
                                    "difficulty": {
                                        "type": "string",
                                        "example": "difficult"
                                    },
                                    "price": {
                                        "type": "number",
                                        "example": 999
                                    },
                                    "summary": {
                                        "type": "string",
                                        "example": "A tour through the dense forests of the Appalachian Mountains."
                                    },
                                    "imageCover": {
                                        "type": "string",
                                        "example": "tour-2-cover.jpg"
                                    }
                                },
                                "required": [
                                    "name",
                                    "duration",
                                    "maxGroupSize",
                                    "difficulty",
                                    "price",
                                    "summary",
                                    "imageCover"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Tour created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "tour": {
                                                    "type": "object",
                                                    "properties": {
                                                        "id": {
                                                            "type": "string",
                                                            "example": "5c88fa8cf4afda39709c2951"
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "The Forest Hiker"
                                                        },
                                                        "duration": {
                                                            "type": "number",
                                                            "example": 5
                                                        },
                                                        "maxGroupSize": {
                                                            "type": "number",
                                                            "example": 12
                                                        },
                                                        "difficulty": {
                                                            "type": "string",
                                                            "example": "difficult"
                                                        },
                                                        "price": {
                                                            "type": "number",
                                                            "example": 999
                                                        },
                                                        "summary": {
                                                            "type": "string",
                                                            "example": "A tour through the dense forests of the Appalachian Mountains."
                                                        },
                                                        "imageCover": {
                                                            "type": "string",
                                                            "example": "tour-2-cover.jpg"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request. Invalid input data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid input data."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - No or invalid token provided",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "You are not logged in. Please log in to get access."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "An internal server error occurred."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tours/{id}": {
            "get": {
                "summary": "Get a tour by ID",
                "tags": [
                    "Tours"
                ],
                "description": "Fetches details of a single tour by its ID.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "5c88fa8cf4afda39709c2951"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tour details fetched successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "type": "object",
                                            "properties": {
                                                "tour": {
                                                    "type": "object",
                                                    "properties": {
                                                        "id": {
                                                            "type": "string",
                                                            "example": "5c88fa8cf4afda39709c2951"
                                                        },
                                                        "name": {
                                                            "type": "string",
                                                            "example": "The Sea Explorer"
                                                        },
                                                        "duration": {
                                                            "type": "number",
                                                            "example": 7
                                                        },
                                                        "maxGroupSize": {
                                                            "type": "number",
                                                            "example": 15
                                                        },
                                                        "difficulty": {
                                                            "type": "string",
                                                            "example": "medium"
                                                        },
                                                        "price": {
                                                            "type": "number",
                                                            "example": 497
                                                        },
                                                        "imageCover": {
                                                            "type": "string",
                                                            "example": "tour-1-cover.jpg"
                                                        },
                                                        "startLocation": {
                                                            "type": "object",
                                                            "properties": {
                                                                "type": {
                                                                    "type": "string",
                                                                    "example": "Point"
                                                                },
                                                                "coordinates": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "number"
                                                                    },
                                                                    "example": [
                                                                        -118.113491,
                                                                        34.111745
                                                                    ]
                                                                },
                                                                "address": {
                                                                    "type": "string",
                                                                    "example": "2555 Brighton Ave, Los Angeles, CA"
                                                                },
                                                                "description": {
                                                                    "type": "string",
                                                                    "example": "Starting point for the tour."
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tour not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "No tour found with that ID."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "An internal server error occurred."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Update tour by ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "5c88fa8cf4afda39709c2951"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "Updated Tour Name"
                                    },
                                    "duration": {
                                        "type": "number",
                                        "example": 10
                                    },
                                    "price": {
                                        "type": "number",
                                        "example": 999
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tour updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid input data."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tour not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "No tour found with that ID."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete tour by ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "5c88fa8cf4afda39709c2951"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Tour deleted successfully"
                    },
                    "404": {
                        "description": "Tour not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "No tour found with that ID."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tours/top-5-cheap": {
            "get": {
                "summary": "Get top 5 cheap tours",
                "tags": [
                    "Tours"
                ],
                "responses": {
                    "200": {
                        "description": "A list of top 5 cheap tours",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tours/tour-stats": {
            "get": {
                "summary": "Get tour statistics",
                "tags": [
                    "Tours"
                ],
                "responses": {
                    "200": {
                        "description": "Tour statistics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tours/monthly-plan/{year}": {
            "get": {
                "summary": "Get monthly plan for a year (available only for admin, guide and lead-guide)",
                "tags": [
                    "Tours"
                ],
                "parameters": [
                    {
                        "name": "year",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "example": 2024
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Monthly plan for the year",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No plan found for the year",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "No plan found for the year."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tours/tours-within/{distance}/center/{latlng}/unit/{unit}": {
            "get": {
                "summary": "Get tours within a certain distance",
                "tags": [
                    "Tours"
                ],
                "parameters": [
                    {
                        "name": "distance",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "number",
                            "example": 233
                        }
                    },
                    {
                        "name": "latlng",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "-40,45"
                        }
                    },
                    {
                        "name": "unit",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "mi"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of tours within the specified distance",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid input data."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/tours/distances/{latlng}/unit/{unit}": {
            "get": {
                "summary": "Get distances to all tours",
                "tags": [
                    "Tours"
                ],
                "parameters": [
                    {
                        "name": "latlng",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "-40,45"
                        }
                    },
                    {
                        "name": "unit",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "mi"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Distances to all tours",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "fail"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Invalid input data."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "error"
                                        },
                                        "message": {
                                            "type": "string",
                                            "example": "Server error occurred."
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/reviews": {
            "get": {
                "summary": "Get All Reviews",
                "tags": [
                    "Reviews"
                ],
                "description": "Retrieve all reviews. Optionally filter reviews by tour.",
                "parameters": [
                    {
                        "name": "tourId",
                        "in": "query",
                        "required": false,
                        "description": "Filter by tour ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of reviews",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "results": {
                                            "type": "integer",
                                            "example": 5
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Review"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. No valid token provided.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            },
            "post": {
                "summary": "Create a Review",
                "tags": [
                    "Reviews"
                ],
                "description": "Create a new review. Requires authentication.",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Review"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Review created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Review"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request. Missing required fields or invalid data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. You need to be logged in.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/reviews/{id}": {
            "get": {
                "summary": "Get a Single Review",
                "tags": [
                    "Reviews"
                ],
                "description": "Retrieve a single review by ID.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Review ID"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Review"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No review found with that ID",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Token not provided or invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Update a Review",
                "tags": [
                    "Reviews"
                ],
                "description": "Update a review by ID. Requires authentication and authorization.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Review ID"
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Review"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Review updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string",
                                            "example": "success"
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/Review"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No review found with that ID",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Only the user who created the review can update it.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a Review",
                "tags": [
                    "Reviews"
                ],
                "description": "Delete a review by ID. Requires authentication and authorization.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Review ID"
                    }
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Review deleted successfully"
                    },
                    "404": {
                        "description": "No review found with that ID",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Only the user who created the review or an admin can delete it.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/notifications": {
            "post": {
                "summary": "Create a notification",
                "tags": [
                    "Notifications"
                ],
                "description": "Allows a user to create a notification without authentication.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationCreationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Notification created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Notification"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request. Missing required fields or invalid email format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Get all notifications (admin only)",
                "description": "Retrieves all notifications. Only accessible by admin users.",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved all notifications.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Notification"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Admin access required.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden. User is not authorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/notifications/with-auth": {
            "post": {
                "summary": "Create a notification (authenticated users)",
                "tags": [
                    "Notifications"
                ],
                "description": "Allows authenticated users to create a notification, with their name and email automatically populated.",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationCreationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Notification created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Notification"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request. Missing required fields or invalid email format.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Authentication required.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/notifications/{id}": {
            "get": {
                "summary": "Get a notification by ID (admin only)",
                "tags": [
                    "Notifications"
                ],
                "description": "Retrieves a single notification by its ID and marks it as read. Only accessible by admin users.",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "ID of the notification"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification retrieved successfully and marked as read.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Notification"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Notification not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Admin access required.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a notification by ID (admin only)",
                "tags": [
                    "Notifications"
                ],
                "description": "Deletes a notification by its ID. Only accessible by admin users.",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "ID of the notification"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Notification deleted successfully."
                    },
                    "404": {
                        "description": "Notification not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized. Admin access required.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/bookings": {
            "get": {
                "summary": "Get all bookings (admin and lead-guide only)",
                "tags": [
                    "Bookings"
                ],
                "description": "Retrieve a list of all bookings.",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved bookings.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BookingResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a new booking (admin and lead-guide only)",
                "tags": [
                    "Bookings"
                ],
                "description": "Creates a new booking.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "tour": {
                                        "type": "string"
                                    },
                                    "user": {
                                        "type": "string"
                                    },
                                    "price": {
                                        "type": "number"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Booking created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BookingResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request. Invalid input.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/bookings/{id}": {
            "get": {
                "summary": "Get a booking by ID (admin and lead-guide only)",
                "tags": [
                    "Bookings"
                ],
                "description": "Retrieve a specific booking by its ID.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "ID of the booking",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the booking.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BookingResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Booking not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "summary": "Update a booking by ID (admin and lead-guide only)",
                "tags": [
                    "Bookings"
                ],
                "description": "Update a specific booking by its ID.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "ID of the booking",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "tour": {
                                        "type": "string"
                                    },
                                    "user": {
                                        "type": "string"
                                    },
                                    "price": {
                                        "type": "number"
                                    },
                                    "paid": {
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Booking updated successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BookingResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Booking not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a booking by ID (admin and lead-guide only)",
                "tags": [
                    "Bookings"
                ],
                "description": "Deletes a specific booking by its ID.",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "ID of the booking",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Booking deleted successfully."
                    },
                    "404": {
                        "description": "Booking not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/bookings/checkout-session/{tourId}": {
            "post": {
                "summary": "Get checkout session for a tour",
                "tags": [
                    "Bookings"
                ],
                "description": "Creates a checkout session for a specified tour.",
                "parameters": [
                    {
                        "name": "tourId",
                        "in": "path",
                        "required": true,
                        "description": "ID of the tour for the checkout session",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Checkout session created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "sessionId": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tour not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized access.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Review": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "example": "60d21b4667d0d8992e610c85"
                    },
                    "review": {
                        "type": "string",
                        "example": "Amazing experience!"
                    },
                    "rating": {
                        "type": "number",
                        "minimum": 1,
                        "maximum": 5,
                        "example": 4
                    },
                    "user": {
                        "type": "string",
                        "example": "60d0fe4f5311236168a109ca"
                    },
                    "tour": {
                        "type": "string",
                        "example": "60d21b4667d0d8992e610c84"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-09-28T07:22:13.837Z"
                    }
                },
                "required": [
                    "review",
                    "rating",
                    "tour",
                    "user"
                ]
            },
            "Notification": {
                "type": "object",
                "properties": {
                    "createdBy": {
                        "type": "string",
                        "description": "Name of the user who created the notification"
                    },
                    "notificationType": {
                        "type": "string",
                        "description": "Type of notification (default: 'request')"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the notification"
                    },
                    "message": {
                        "type": "string",
                        "description": "Notification message content"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address of the user who created the notification"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the notification (default: 'unread')"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the notification was created"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Timestamp when the notification was last updated"
                    }
                }
            },
            "NotificationCreationRequest": {
                "type": "object",
                "required": [
                    "title",
                    "message",
                    "email"
                ],
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "Title of the notification"
                    },
                    "message": {
                        "type": "string",
                        "description": "Notification message content"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address of the user creating the notification"
                    }
                }
            },
            "ErrorResponse": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "example": "fail"
                    },
                    "message": {
                        "type": "string",
                        "example": "No document found with that ID"
                    }
                }
            },
            "Booking": {
                "type": "object",
                "properties": {
                    "tour": {
                        "type": "string",
                        "description": "ID of the tour."
                    },
                    "user": {
                        "type": "string",
                        "description": "ID of the user."
                    },
                    "price": {
                        "type": "number",
                        "description": "Price of the booking."
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date when the booking was created."
                    },
                    "paid": {
                        "type": "boolean",
                        "description": "Indicates whether the booking is paid."
                    }
                }
            },
            "BookingResponse": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string"
                    },
                    "data": {
                        "type": "object",
                        "properties": {
                            "booking": {
                                "$ref": "#/components/schemas/Booking"
                            }
                        }
                    }
                }
            }
        }
    }
}